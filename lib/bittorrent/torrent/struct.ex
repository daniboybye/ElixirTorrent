defmodule Torrent.Struct do
  @enforce_keys [:hash, :struct, :left, :last_index, :last_piece_length]
  defstruct [
    :hash,
    :struct,
    :left,
    :last_index,
    :last_piece_length,
    peer_status: nil,
    uploaded: 0,
    downloaded: 0,
    status: "started"
  ]

  @type t :: %__MODULE__{
          # urlencoded 20-byte string used as a unique ID for the client, 
          # generated by the client at startup
          hash: Torrent.hash(),
          struct: %{required(binary()) => map()},
          # The number of bytes this client still has to download in base
          # ten ASCII. Clarification: 
          # The number of bytes needed to download to be 100% complete 
          # and get all the included files in the torrent.
          left: non_neg_integer(),
          last_index: Torrent.index(),
          last_piece_length: Torrent.length(),
          peer_status: nil | :seed | Torrent.index(),
          # The total amount uploaded 
          # (since the client sent the 'started' event to the tracker)"""
          uploaded: non_neg_integer(),
          # The total amount downloaded 
          # (since the client sent the 'started' event to the tracker)"""
          downloaded: non_neg_integer(),
          # "started" | "empty" | "completed" | "stopped"
          status: binary()
        }
end
